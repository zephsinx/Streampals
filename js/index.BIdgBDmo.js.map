{"version":3,"file":"index.BIdgBDmo.js","sources":["../../src/streampals/js/utils/constants.js","../../src/streampals/js/utils/utils.js","../../src/streampals/js/streampals.js"],"sourcesContent":["// streampals constants.\nconst DefaultMinMinutes = 30;\nconst DefaultMaxMinutes = 90;\nconst DefaultMediaDurationSeconds = 5;\n\nconst DefaultMaxHeight = \"25\"; // Percentage value\nconst DefaultMaxWidth = \"25\"; // Percentage value\n\n// Warning messages\nconst ZeroMediaDurationWarning = \"Unable to calculate media duration for the requested media. Please set the media duration (in seconds) via the `mediaDuration` parameter. Parameter supports decimal values.\";\n\n// Error messages\nconst ContentTypeNotFoundError = \"Unable to determine content type of from media URL. Defaulting to `img` tag\";\nconst ContentTypeNotSupportedError = \"Content type not yet supported. Defaulting to `img` tag\\\". Content type found: `{0}`\";\nconst FetchImageError = \"Error fetching image from URL '{0}'. Error status: '{1}'\";\n\nexport default Object.freeze({\n    DefaultMinMinutes: DefaultMinMinutes,\n    DefaultMaxMinutes: DefaultMaxMinutes,\n    DefaultMaxHeight: DefaultMaxHeight,\n    DefaultMaxWidth: DefaultMaxWidth,\n    DefaultMediaDurationSeconds: DefaultMediaDurationSeconds,\n    ZeroMediaDurationWarning: ZeroMediaDurationWarning,\n    ContentTypeNotFoundError: ContentTypeNotFoundError,\n    ContentTypeNotSupportedError: ContentTypeNotSupportedError,\n    FetchImageError: FetchImageError,\n});","// Get media coordinate styles for a random screen quadrant\nconst getMediaCoordinateStyles = function (lastQuadrant, mediaHeight, mediaWidth) {\n    let x;\n    let y;\n    let quadrantX;\n    let quadrantY;\n    let newQuadrant;\n\n    let windowHeight = window.innerHeight;\n    let windowWidth = window.innerWidth;\n    let quadrantHeight = windowHeight * 0.5;\n    let quadrantWidth = windowWidth * 0.5;\n\n    // Pick random quadrant, different to the previous\n    do {\n        newQuadrant = Math.floor(Math.random() * 4);\n    } while (newQuadrant === lastQuadrant);\n\n    // Pick a random value for media x, ensuring the image remains on-screen\n    do {\n        quadrantX = Math.floor(Math.random() * quadrantWidth);\n    } while (quadrantX + mediaWidth > quadrantWidth);\n\n    // Pick a random value for media y, ensuring the image remains on-screen\n    do {\n        quadrantY = Math.floor(Math.random() * quadrantHeight);\n    } while (quadrantY + mediaHeight > quadrantHeight);\n\n    x = newQuadrant % 2 === 0 ? quadrantX : quadrantWidth + quadrantX;\n    y = newQuadrant < 2 ? quadrantY : quadrantHeight + quadrantY;\n\n    return {quadrant: newQuadrant, left: `${x}px`, top: `${y}px`};\n}\n\n// Returns a random integer between min and max (inclusive)\nconst randomIntFromInterval = function (min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min)\n}\n\n\nexport default {\n    getMediaCoordinateStyles: getMediaCoordinateStyles,\n    randomIntFromInterval: randomIntFromInterval,\n};\n","\"use strict\";\n\nimport constants from \"./utils/constants.js\";\nimport utils from \"./utils/utils.js\";\n// Global defaults\nconst DefaultMediaDurationMillis = constants.DefaultMediaDurationSeconds * 1000;\nconst DefaultMinMillis = constants.DefaultMinMinutes * 60 * 1000;\nconst DefaultMaxMillis = constants.DefaultMaxMinutes * 60 * 1000;\nconst DefaultMediaUrl = \"/media/worms.gif\";\n\n// Div containing the media to display\nconst mediaDiv = document.getElementById(\"media-div\");\n\n// Global variables\n\nlet tagName;\nlet element;\nlet config;\nlet first = true;\n\n// Get config settings\ngetStreampalsConfig()\n  .then((configVal) => {\n    config = configVal;\n    tagName = getTagNameFromFile(config.contentType);\n    element = prepareElement(tagName, config);\n  })\n  .then(() => {\n    // Create and append media element to media div\n    mediaDiv.appendChild(element);\n    // Get the height and width of the media element\n    element.onload = () => {\n      // Remove the onload event listener after the first load\n      element.onload = null;\n      playMediaLoop(element);\n    };\n  });\n\n//#region Media Methods\n\n// Plays media after a random delay, then hides the media after durationMillis expires, and requeues the media timer\nfunction playMediaLoop(element) {\n  let delay = utils.randomIntFromInterval(config.minDelay, config.maxDelay);\n  if (first) {\n    setPosition(element);\n    delay = 0;\n    first = false;\n  }\n  // Display the image after the random delay expires\n  setTimeout(() => {\n    // Reset image source to replay in the case of a GIF\n    if (tagName === \"img\") {\n      setMediaUrl(element, config);\n    }\n    // Restart video and play in the case of a WebM\n    else {\n      element.currentTime = 0;\n      element.play();\n    }\n    // Make media visible\n    mediaDiv.style.visibility = \"visible\";\n\n    // Hide image/video after it plays for the desired duration, and requeue the media timer\n    setTimeout(() => {\n      mediaDiv.style.visibility = \"hidden\";\n      setPosition(element);\n      playMediaLoop(element);\n    }, config.mediaDuration);\n  }, delay);\n}\n\nlet lastQuadrant;\n\n// Set position of media element on page\nfunction setPosition(element) {\n  let coordinates = utils.getMediaCoordinateStyles(\n    lastQuadrant,\n    element.height,\n    element.width\n  );\n  lastQuadrant = coordinates.quadrant;\n  element.style.left = coordinates.left;\n  element.style.top = coordinates.top;\n}\n\n// Check if we should randomize the media\nfunction setMediaUrl(element, config) {\n  element.src = \"\";\n  if (config.randomImage) {\n    let randomIndex = Math.floor(Math.random() * config.mediaPaths.length);\n    element.src = config.mediaPaths[randomIndex];\n  } else {\n    element.src = config.mediaUrl;\n  }\n}\n\n//#endregion\n\n//#region Streampals configuration methods\n\n// Get Streampals config\nasync function getStreampalsConfig() {\n  let urlParams = getUrlParams();\n  let config = await createConfig(urlParams);\n  return validateConfig(config);\n}\n\nfunction getUrlParams() {\n  return new Proxy(new URLSearchParams(window.location.search), {\n    get: (searchParams, prop) => searchParams.get(prop || \"\"),\n  });\n}\n\nasync function createConfig(urlParams) {\n  const skipDelay = urlParams.skipDelay === \"true\";\n  const maxDelayMillis = getDelayMillis(\n    skipDelay,\n    urlParams.max,\n    DefaultMaxMillis\n  );\n  const minDelayMillis = getDelayMillis(\n    skipDelay,\n    urlParams.min,\n    DefaultMinMillis\n  );\n  const maxHeight = isValidNumericValue(urlParams.maxHeight)\n    ? urlParams.maxHeight\n    : constants.DefaultMaxHeight;\n  const maxWidth = isValidNumericValue(urlParams.maxWidth)\n    ? urlParams.maxWidth\n    : constants.DefaultMaxWidth;\n  let randomImage =\n    urlParams.randomImage === undefined || urlParams.randomImage === null\n      ? true\n      : urlParams.randomImage === \"true\";\n\n  const mediaFile = await getMediaFile(urlParams.mediaUrl);\n  const mediaPaths = mediaFile.mediaPaths || [];\n\n  let mediaPath = getMediaUrl(\n    mediaFile.mediaPath,\n    mediaFile.mediaPaths,\n    randomImage\n  );\n\n  let mediaDuration = urlParams.mediaDuration;\n  // Get content type from file extension\n  let extension = mediaPath.split(\".\").pop().split(\"?\")[0];\n  let contentType = getContentTypeFromFileExtension(extension);\n\n  if (!isValidNumericValue(mediaDuration) || contentType === \"\") {\n    let mediaInfo;\n    try {\n      mediaInfo = await fetchMediaInfo(mediaPath);\n      if (contentType === \"\") {\n        contentType = mediaInfo.contentType;\n      }\n      if (!isValidNumericValue(mediaDuration)) {\n        mediaDuration = mediaInfo.duration;\n      }\n    } catch (error) {\n      console.log(\n        `Using default media duration of ${DefaultMediaDurationMillis} milliseconds`\n      );\n      mediaDuration = DefaultMediaDurationMillis;\n    }\n  }\n\n  return {\n    skipDelay: skipDelay,\n    maxDelay: maxDelayMillis,\n    minDelay: minDelayMillis,\n    maxHeight: maxHeight,\n    maxWidth: maxWidth,\n    mediaUrl: mediaPath,\n    mediaPaths: mediaPaths,\n    mediaDuration: mediaDuration,\n    contentType: contentType,\n    randomImage: randomImage,\n  };\n}\n\nasync function getMediaFile(urlParamMediaUrl) {\n  if (urlParamMediaUrl) {\n    return { mediaPath: urlParamMediaUrl, mediaPaths: [] };\n  }\n\n  // Fetch media file\n  let mediaFile = await fetch(\"/media/media.json\")\n    .then((res) => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(res);\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n\n  return mediaFile || { mediaPath: DefaultMediaUrl, mediaPaths: [] };\n}\n\n// Get media URL\nfunction getMediaUrl(mediaPath, mediaPaths, randomImage) {\n  if (mediaPath) {\n    return mediaPath;\n  } else if (mediaPaths.length > 0) {\n    if (randomImage) {\n      const randomIndex = Math.floor(Math.random() * mediaPaths.length);\n      return mediaPaths[randomIndex];\n    }\n    return mediaPaths[0];\n  }\n  return DefaultMediaUrl;\n}\n\n// Validate and update config if invalid.\nfunction validateConfig(config) {\n  // minDelayMillis must be less than or equal to maxDelayMillis, else use defaults\n  if (config.maxDelayMillis < config.minDelayMillis) {\n    config.maxDelayMillis = DefaultMaxMillis;\n    config.minDelayMillis = DefaultMinMillis;\n  }\n\n  if (config.mediaDuration === 0) {\n    throw new Error(constants.ZeroMediaDurationWarning);\n  }\n\n  return config;\n}\n\n// Validate and calculate delay in milliseconds from params\nfunction getDelayMillis(skipDelay, delayMinutes, defaultDelay) {\n  if (skipDelay) return 0;\n\n  return isValidNumericValue(delayMinutes)\n    ? delayMinutes * 60 * 1000\n    : defaultDelay;\n}\n\n// Check that provided string is a valid number and positive\nfunction isValidNumericValue(numberString) {\n  return (\n    !isNaN(numberString) &&\n    !isNaN(parseFloat(numberString)) &&\n    parseFloat(numberString) > 0\n  );\n}\n\n// Fetch media file\nasync function fetchMediaInfo(mediaUrl) {\n  let contentType;\n  let duration = await fetch(mediaUrl)\n    .then((res) => {\n      if (res.ok) {\n        {\n          contentType = res.headers.get(\"Content-Type\");\n          return Promise.resolve(res);\n        }\n      }\n      return Promise.reject(res);\n    })\n    .then((res) => res.arrayBuffer())\n    .then((ab) => calculateMediaDuration(new Uint8Array(ab)))\n    .catch((err) => {\n      throw new Error(\n        constants.FetchImageError.replace(\"{0}\", mediaUrl).replace(\n          \"{1}\",\n          `${err.status} - ${err.statusText}`\n        )\n      );\n    });\n\n  return { contentType: contentType, duration: duration };\n}\n\n// Fancy method to get Media length\nfunction calculateMediaDuration(uint8) {\n  let duration = 0;\n  for (let i = 0; i < uint8.length; i++) {\n    if (\n      uint8[i] === 0x21 &&\n      uint8[i + 1] === 0xf9 &&\n      uint8[i + 2] === 0x04 &&\n      uint8[i + 7] === 0x00\n    ) {\n      const delay = (uint8[i + 5] << 8) | uint8[i + 4];\n      duration += delay < 2 ? 10 : delay;\n    }\n  }\n  return duration * 10;\n}\n\n//#endregion\n\n//#region Element Configuration\n\n// Configure element to display based on tagName\nfunction prepareElement(tagName, config) {\n  // Create img or video element based on tagName\n  let mediaElement = document.createElement(tagName);\n  mediaElement.id = \"rendered-media\";\n  mediaElement.style.objectFit = \"contain\";\n  mediaElement.style.maxHeight = config.maxHeight + \"%\";\n  mediaElement.style.maxWidth = config.maxWidth + \"%\";\n  mediaElement.style.position = \"absolute\";\n  mediaElement.style.top = \"0\";\n  mediaElement.style.left = \"0\";\n  mediaElement.alt = \"Just a lil' stream pal\";\n\n  switch (tagName) {\n    case \"img\":\n      setMediaUrl(mediaElement, config);\n      return mediaElement;\n    case \"video\":\n      return configureVideoElement(mediaElement, config);\n    default:\n      throw new Error(`Tag name ${tagName} not recognized`);\n  }\n}\n\n// Map file extension to content type\nfunction getContentTypeFromFileExtension(fileExtension) {\n  switch (fileExtension) {\n    case \"avif\":\n      return \"image/avif\";\n    case \"gif\":\n      return \"image/gif\";\n    case \"jpeg\":\n    case \"jpg\":\n      return \"image/jpeg\";\n    case \"png\":\n      return \"image/png\";\n    case \"svg\":\n      return \"image/svg+xml\";\n    case \"webp\":\n      return \"image/webp\";\n    case \"webm\":\n      return \"video/webm\";\n    default:\n      return \"\";\n  }\n}\n\n// Get the appropriate element tag name from the media file extension\nfunction getTagNameFromFile(contentType) {\n  switch (contentType) {\n    case \"image/avif\":\n    case \"image/gif\":\n    case \"image/jpeg\":\n    case \"image/png\":\n    case \"image/svg+xml\":\n    case \"image/webp\":\n    case contentType.startsWith(\"image/\"):\n      return \"img\";\n    case \"video/webm\":\n    case contentType.startsWith(\"video/\"):\n      return \"video\";\n    default:\n      {\n        if (!contentType) console.warn(constants.ContentTypeNotFoundError);\n        else\n          console.warn(\n            constants.ContentTypeNotSupportedError.replace(\"{0}\", contentType)\n          );\n      }\n      return \"img\";\n  }\n}\n\n// Set Video properties\nfunction configureVideoElement(videoElement, config) {\n  let videoSource = document.createElement(\"source\");\n  videoSource.src = config.mediaUrl;\n  videoSource.type = config.contentType;\n\n  // Note: autoplay only works in Chrome after a user has interacted with the DOM unless the muted tag is used\n  videoElement.autoplay = true;\n  videoElement.appendChild(videoSource);\n\n  return videoElement;\n}\n\n//#endregion\n"],"names":["DefaultMinMinutes","DefaultMaxMinutes","DefaultMediaDurationSeconds","DefaultMaxHeight","DefaultMaxWidth","ZeroMediaDurationWarning","ContentTypeNotFoundError","ContentTypeNotSupportedError","FetchImageError","constants","getMediaCoordinateStyles","lastQuadrant","mediaHeight","mediaWidth","x","y","quadrantX","quadrantY","newQuadrant","windowHeight","windowWidth","quadrantHeight","quadrantWidth","randomIntFromInterval","min","max","utils","DefaultMediaDurationMillis","DefaultMinMillis","DefaultMaxMillis","DefaultMediaUrl","mediaDiv","tagName","element","config","first","getStreampalsConfig","configVal","getTagNameFromFile","prepareElement","playMediaLoop","delay","setPosition","setMediaUrl","coordinates","randomIndex","urlParams","getUrlParams","createConfig","validateConfig","searchParams","prop","skipDelay","maxDelayMillis","getDelayMillis","minDelayMillis","maxHeight","isValidNumericValue","maxWidth","randomImage","mediaFile","getMediaFile","mediaPaths","mediaPath","getMediaUrl","mediaDuration","extension","contentType","getContentTypeFromFileExtension","mediaInfo","fetchMediaInfo","urlParamMediaUrl","res","err","delayMinutes","defaultDelay","numberString","mediaUrl","duration","ab","calculateMediaDuration","uint8","i","mediaElement","configureVideoElement","fileExtension","videoElement","videoSource"],"mappings":"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"}